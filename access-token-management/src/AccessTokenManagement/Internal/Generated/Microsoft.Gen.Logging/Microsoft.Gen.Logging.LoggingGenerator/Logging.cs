
// <auto-generated/>
#nullable enable
using Microsoft.Extensions.Logging;

#pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103

namespace Duende.AccessTokenManagement.Internal
{
    internal static class Log
    {
        /// <summary>
        /// Logs "Cannot authenticate scheme: {Scheme} to acquire user access token.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static void CannotAuthenticateSchemeToAcquireUserAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.Scheme? scheme)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Cannot authenticate scheme: {Scheme} to acquire user access token.");
            state.TagArray[0] = new("Scheme", scheme?.ToString());

            logger.Log(
                logLevel,
                new(36740847, nameof(CannotAuthenticateSchemeToAcquireUserAccessToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var scheme = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Cannot authenticate scheme: {scheme} to acquire user access token.");
                    #else
                    return global::System.FormattableString.Invariant($"Cannot authenticate scheme: {scheme} to acquire user access token.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Authentication result properties are null for scheme: {Scheme} after authentication.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void AuthenticationResultPropertiesAreNullAfterAuthenticate(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.Scheme? scheme)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Authentication result properties are null for scheme: {Scheme} after authentication.");
            state.TagArray[0] = new("Scheme", scheme?.ToString());

            logger.Log(
                logLevel,
                new(1097808267, nameof(AuthenticationResultPropertiesAreNullAfterAuthenticate)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var scheme = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Authentication result properties are null for scheme: {scheme} after authentication.");
                    #else
                    return global::System.FormattableString.Invariant($"Authentication result properties are null for scheme: {scheme} after authentication.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to get a UserToken because no tokens found in cookie properties. SaveTokens must be enabled for automatic token refresh.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToGetUserTokenDueToMissingTokensInCookie(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel level)
        {
            if (!logger.IsEnabled(level))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "Failed to get a UserToken because no tokens found in cookie properties. SaveTokens must be enabled for automatic token refresh.");

            logger.Log(
                level,
                new(834685887, nameof(FailedToGetUserTokenDueToMissingTokensInCookie)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "Failed to get a UserToken because no tokens found in cookie properties. SaveTokens must be enabled for automatic token refresh.";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Error revoking refresh token. Error = {Error}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToRevokeAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string? error)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Error revoking refresh token. Error = {Error}");
            state.TagArray[0] = new("Error", error);

            logger.Log(
                logLevel,
                new(840196874, nameof(FailedToRevokeAccessToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var error = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Error revoking refresh token. Error = {error}");
                    #else
                    return global::System.FormattableString.Invariant($"Error revoking refresh token. Error = {error}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Sending DPoP proof token in request to endpoint: {Url}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void SendingDPoPProofToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri? url)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Sending DPoP proof token in request to endpoint: {Url}");
            state.TagArray[0] = new("Url", url);

            logger.Log(
                logLevel,
                new(892293471, nameof(SendingDPoPProofToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Sending DPoP proof token in request to endpoint: {url}");
                    #else
                    return global::System.FormattableString.Invariant($"Sending DPoP proof token in request to endpoint: {url}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to create DPoP proof token for request to endpoint: {Url}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToCreateDPopProofToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri? url)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Failed to create DPoP proof token for request to endpoint: {Url}");
            state.TagArray[0] = new("Url", url);

            logger.Log(
                logLevel,
                new(351736789, nameof(FailedToCreateDPopProofToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Failed to create DPoP proof token for request to endpoint: {url}");
                    #else
                    return global::System.FormattableString.Invariant($"Failed to create DPoP proof token for request to endpoint: {url}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Sending Access token of type {TokenType} to endpoint: {Url}.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void SendAccessTokenToEndpoint(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri? url, string? tokenType)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Sending Access token of type {TokenType} to endpoint: {Url}.");
            state.TagArray[1] = new("Url", url);
            state.TagArray[0] = new("TokenType", tokenType);

            logger.Log(
                logLevel,
                new(1035661102, nameof(SendAccessTokenToEndpoint)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[1].Value ?? "(null)";
                    var tokenType = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Sending Access token of type {tokenType} to endpoint: {url}.");
                    #else
                    return global::System.FormattableString.Invariant($"Sending Access token of type {tokenType} to endpoint: {url}.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to obtain an access token while sending the request. Error: {Error}, ErrorDescription {ErrorDescription}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToObtainAccessTokenWhileSendingRequest(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string? error, string? errorDescription)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Failed to obtain an access token while sending the request. Error: {Error}, ErrorDescription {ErrorDescription}");
            state.TagArray[1] = new("Error", error);
            state.TagArray[0] = new("ErrorDescription", errorDescription);

            logger.Log(
                logLevel,
                new(1370046225, nameof(FailedToObtainAccessTokenWhileSendingRequest)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var error = s.TagArray[1].Value ?? "(null)";
                    var errorDescription = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Failed to obtain an access token while sending the request. Error: {error}, ErrorDescription {errorDescription}");
                    #else
                    return global::System.FormattableString.Invariant($"Failed to obtain an access token while sending the request. Error: {error}, ErrorDescription {errorDescription}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "While sending a request, received UnAuthorized after acquiring a new access token. This means the access token is somehow wrong and is not accepted.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void AccessTokenHandlerAuthenticationFailed(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "While sending a request, received UnAuthorized after acquiring a new access token. This means the access token is somehow wrong and is not accepted.");

            logger.Log(
                logLevel,
                new(2027918051, nameof(AccessTokenHandlerAuthenticationFailed)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "While sending a request, received UnAuthorized after acquiring a new access token. This means the access token is somehow wrong and is not accepted.";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "DPoP nonce error: '{Error}'. Retrying using new nonce".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void RequestFailedWithDPoPErrorWillRetry(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string? error)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "DPoP nonce error: '{Error}'. Retrying using new nonce");
            state.TagArray[0] = new("Error", error);

            logger.Log(
                logLevel,
                new(72705812, nameof(RequestFailedWithDPoPErrorWillRetry)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var error = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"DPoP nonce error: '{error}'. Retrying using new nonce");
                    #else
                    return global::System.FormattableString.Invariant($"DPoP nonce error: '{error}'. Retrying using new nonce");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Token not accepted while sending request. Retrying with new access token. ".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void TokenNotAcceptedWhenSendingRequest(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "Token not accepted while sending request. Retrying with new access token. ");

            logger.Log(
                logLevel,
                new(392627759, nameof(TokenNotAcceptedWhenSendingRequest)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "Token not accepted while sending request. Retrying with new access token. ";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Refreshing access token using refresh token: hash={TokenHash}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        private static  void RefreshingTokenUsingRefreshTokenImplementation(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string tokenHash)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Refreshing access token using refresh token: hash={TokenHash}");
            state.TagArray[0] = new("TokenHash", tokenHash);

            logger.Log(
                logLevel,
                new(2082431649, nameof(RefreshingTokenUsingRefreshTokenImplementation)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var tokenHash = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Refreshing access token using refresh token: hash={tokenHash}");
                    #else
                    return global::System.FormattableString.Invariant($"Refreshing access token using refresh token: hash={tokenHash}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Sending Refresh token request to: {Url}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void SendingRefreshTokenRequest(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri? url)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Sending Refresh token request to: {Url}");
            state.TagArray[0] = new("Url", url);

            logger.Log(
                logLevel,
                new(153269258, nameof(SendingRefreshTokenRequest)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Sending Refresh token request to: {url}");
                    #else
                    return global::System.FormattableString.Invariant($"Sending Refresh token request to: {url}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "DPoP error '{Error}' during token refresh. Retrying with server nonce".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void DPoPErrorDuringTokenRefreshWillRetryWithServerNonce(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string? error)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "DPoP error '{Error}' during token refresh. Retrying with server nonce");
            state.TagArray[0] = new("Error", error);

            logger.Log(
                logLevel,
                new(2029506487, nameof(DPoPErrorDuringTokenRefreshWillRetryWithServerNonce)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var error = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"DPoP error '{error}' during token refresh. Retrying with server nonce");
                    #else
                    return global::System.FormattableString.Invariant($"DPoP error '{error}' during token refresh. Retrying with server nonce");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to get DPoP Nonce because server didn't respond with ok. StatusCode was: {StatusCode}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToGetDPoPNonce(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Net.HttpStatusCode statusCode)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Failed to get DPoP Nonce because server didn't respond with ok. StatusCode was: {StatusCode}");
            state.TagArray[0] = new("StatusCode", statusCode);

            logger.Log(
                logLevel,
                new(1533795437, nameof(FailedToGetDPoPNonce)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var statusCode = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Failed to get DPoP Nonce because server didn't respond with ok. StatusCode was: {statusCode}");
                    #else
                    return global::System.FormattableString.Invariant($"Failed to get DPoP Nonce because server didn't respond with ok. StatusCode was: {statusCode}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Revoking refresh token: hash={TokenHash}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        private static  void RevokingRefreshTokenImplementation(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string tokenHash)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Revoking refresh token: hash={TokenHash}");
            state.TagArray[0] = new("TokenHash", tokenHash);

            logger.Log(
                logLevel,
                new(195046214, nameof(RevokingRefreshTokenImplementation)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var tokenHash = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Revoking refresh token: hash={tokenHash}");
                    #else
                    return global::System.FormattableString.Invariant($"Revoking refresh token: hash={tokenHash}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Sending Token revocation request to: {Url}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void SendingTokenRevocationRequest(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri url)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Sending Token revocation request to: {Url}");
            state.TagArray[0] = new("Url", url);

            logger.Log(
                logLevel,
                new(886345569, nameof(SendingTokenRevocationRequest)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Sending Token revocation request to: {url}");
                    #else
                    return global::System.FormattableString.Invariant($"Sending Token revocation request to: {url}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Starting user token acquisition".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void StartingUserTokenAcquisition(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "Starting user token acquisition");

            logger.Log(
                logLevel,
                new(1754868578, nameof(StartingUserTokenAcquisition)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "Starting user token acquisition";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Cannot retrieve token: No active user".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CannotRetrieveAccessTokenDueToNoActiveUser(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "Cannot retrieve token: No active user");

            logger.Log(
                logLevel,
                new(997850862, nameof(CannotRetrieveAccessTokenDueToNoActiveUser)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "Cannot retrieve token: No active user";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Cannot retrieve token: No token data found in user token store for user {User}.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CannotRetrieveAccessTokenDueToNoTokenDataFound(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string user)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Cannot retrieve token: No token data found in user token store for user {User}.");
            state.TagArray[0] = new("User", user);

            logger.Log(
                logLevel,
                new(154568560, nameof(CannotRetrieveAccessTokenDueToNoTokenDataFound)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var user = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Cannot retrieve token: No token data found in user token store for user {user}.");
                    #else
                    return global::System.FormattableString.Invariant($"Cannot retrieve token: No token data found in user token store for user {user}.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "No refresh token found in user token store for user {User} / resource {Resource}. Returning current access token.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void NoRefreshTokenAvailableWillNotRefresh(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string user, global::Duende.AccessTokenManagement.Resource? resource)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "No refresh token found in user token store for user {User} / resource {Resource}. Returning current access token.");
            state.TagArray[1] = new("User", user);
            state.TagArray[0] = new("Resource", resource?.ToString());

            logger.Log(
                logLevel,
                new(1830191793, nameof(NoRefreshTokenAvailableWillNotRefresh)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var user = s.TagArray[1].Value ?? "(null)";
                    var resource = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"No refresh token found in user token store for user {user} / resource {resource}. Returning current access token.");
                    #else
                    return global::System.FormattableString.Invariant($"No refresh token found in user token store for user {user} / resource {resource}. Returning current access token.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "No access token found in user token store for user {User} / resource {Resource}. Trying to refresh.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void NoAccessTokenFoundWillRefresh(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string user, global::Duende.AccessTokenManagement.Resource resource)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "No access token found in user token store for user {User} / resource {Resource}. Trying to refresh.");
            state.TagArray[1] = new("User", user);
            state.TagArray[0] = new("Resource", resource.ToString());

            logger.Log(
                logLevel,
                new(34862910, nameof(NoAccessTokenFoundWillRefresh)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var user = s.TagArray[1].Value ?? "(null)";
                    var resource = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"No access token found in user token store for user {user} / resource {resource}. Trying to refresh.");
                    #else
                    return global::System.FormattableString.Invariant($"No access token found in user token store for user {user} / resource {resource}. Trying to refresh.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Token for user {User} will be refreshed. Expiration: {Expiration}, ForceRenewal:{ForceRenewal}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void TokenNeedsRefreshing(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string user, global::System.DateTimeOffset? expiration, bool forceRenewal)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(4);
            state.TagArray[3] = new("{OriginalFormat}", "Token for user {User} will be refreshed. Expiration: {Expiration}, ForceRenewal:{ForceRenewal}");
            state.TagArray[2] = new("User", user);
            state.TagArray[1] = new("Expiration", expiration);
            state.TagArray[0] = new("ForceRenewal", forceRenewal);

            logger.Log(
                logLevel,
                new(541537258, nameof(TokenNeedsRefreshing)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var user = s.TagArray[2].Value ?? "(null)";
                    var expiration = s.TagArray[1].Value ?? "(null)";
                    var forceRenewal = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Token for user {user} will be refreshed. Expiration: {expiration}, ForceRenewal:{forceRenewal}");
                    #else
                    return global::System.FormattableString.Invariant($"Token for user {user} will be refreshed. Expiration: {expiration}, ForceRenewal:{forceRenewal}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Returning refreshed token for user: {User}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void ReturningRefreshedToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string user)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Returning refreshed token for user: {User}");
            state.TagArray[0] = new("User", user);

            logger.Log(
                logLevel,
                new(81806206, nameof(ReturningRefreshedToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var user = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Returning refreshed token for user: {user}");
                    #else
                    return global::System.FormattableString.Invariant($"Returning refreshed token for user: {user}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Returning current token for user: {User}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void ReturningCurrentTokenForUser(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string user)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Returning current token for user: {User}");
            state.TagArray[0] = new("User", user);

            logger.Log(
                logLevel,
                new(2128149433, nameof(ReturningCurrentTokenForUser)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var user = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Returning current token for user: {user}");
                    #else
                    return global::System.FormattableString.Invariant($"Returning current token for user: {user}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Error refreshing access token. Error = {Error}, Description: {ErrorDescription}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToRefreshAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, string? error, string? errorDescription)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Error refreshing access token. Error = {Error}, Description: {ErrorDescription}");
            state.TagArray[1] = new("Error", error);
            state.TagArray[0] = new("ErrorDescription", errorDescription);

            logger.Log(
                logLevel,
                new(1897995763, nameof(FailedToRefreshAccessToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var error = s.TagArray[1].Value ?? "(null)";
                    var errorDescription = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Error refreshing access token. Error = {error}, Description: {errorDescription}");
                    #else
                    return global::System.FormattableString.Invariant($"Error refreshing access token. Error = {error}, Description: {errorDescription}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Access Token of type {TokenType} refreshed with expiration: {Expiration}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void UserAccessTokenRefreshed(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.AccessTokenType? tokenType, global::System.DateTimeOffset expiration)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Access Token of type {TokenType} refreshed with expiration: {Expiration}");
            state.TagArray[1] = new("TokenType", tokenType?.ToString());
            state.TagArray[0] = new("Expiration", expiration);

            logger.Log(
                logLevel,
                new(665780609, nameof(UserAccessTokenRefreshed)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var tokenType = s.TagArray[1].Value ?? "(null)";
                    var expiration = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Access Token of type {tokenType} refreshed with expiration: {expiration}");
                    #else
                    return global::System.FormattableString.Invariant($"Access Token of type {tokenType} refreshed with expiration: {expiration}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "The authorization server has supplied a new nonce on a successful response, which will be stored and used in future requests to the authorization server".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void AuthorizationServerSuppliedNewNonce(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "The authorization server has supplied a new nonce on a successful response, which will be stored and used in future requests to the authorization server");

            logger.Log(
                logLevel,
                new(1071334178, nameof(AuthorizationServerSuppliedNewNonce)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "The authorization server has supplied a new nonce on a successful response, which will be stored and used in future requests to the authorization server";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Caching access token for client: {ClientName}. Expiration: {Expiration}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CachingAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName, global::System.TimeSpan cacheDuration)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Caching access token for client: {ClientName}. Expiration: {Expiration}");
            state.TagArray[1] = new("ClientName", clientName.ToString());
            state.TagArray[0] = new("CacheDuration", cacheDuration);

            logger.Log(
                logLevel,
                new(1775469229, nameof(CachingAccessToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[1].Value;
                    var expiration = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Caching access token for client: {clientName}. Expiration: {expiration}");
                    #else
                    return global::System.FormattableString.Invariant($"Caching access token for client: {clientName}. Expiration: {expiration}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Will not cache token result with error for {ClientName}. Error = {Error}, Description: {ErrorDescription}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void WillNotCacheTokenResultWithError(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName, string error, string? errorDescription)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(4);
            state.TagArray[3] = new("{OriginalFormat}", "Will not cache token result with error for {ClientName}. Error = {Error}, Description: {ErrorDescription}");
            state.TagArray[2] = new("ClientName", clientName.ToString());
            state.TagArray[1] = new("Error", error);
            state.TagArray[0] = new("ErrorDescription", errorDescription);

            logger.Log(
                logLevel,
                new(817967174, nameof(WillNotCacheTokenResultWithError)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[2].Value;
                    var error = s.TagArray[1].Value ?? "(null)";
                    var errorDescription = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Will not cache token result with error for {clientName}. Error = {error}, Description: {errorDescription}");
                    #else
                    return global::System.FormattableString.Invariant($"Will not cache token result with error for {clientName}. Error = {error}, Description: {errorDescription}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "An exception has occurred while reading ClientCredentialsToken value from the cache for client {ClientName}. The call will be executed without the cache.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void ExceptionWhileReadingFromCache(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Exception ex, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "An exception has occurred while reading ClientCredentialsToken value from the cache for client {ClientName}. The call will be executed without the cache.");
            state.TagArray[0] = new("ClientName", clientName.ToString());

            logger.Log(
                logLevel,
                new(1531695121, nameof(ExceptionWhileReadingFromCache)),
                state,
                ex,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"An exception has occurred while reading ClientCredentialsToken value from the cache for client {clientName}. The call will be executed without the cache.");
                    #else
                    return global::System.FormattableString.Invariant($"An exception has occurred while reading ClientCredentialsToken value from the cache for client {clientName}. The call will be executed without the cache.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Error requesting access token for client {ClientName}. Error = {Error}, Description: {ErrorDescription}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToRequestAccessTokenForClient(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName, string? error, string? errorDescription)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(4);
            state.TagArray[3] = new("{OriginalFormat}", "Error requesting access token for client {ClientName}. Error = {Error}, Description: {ErrorDescription}");
            state.TagArray[2] = new("ClientName", clientName.ToString());
            state.TagArray[1] = new("Error", error);
            state.TagArray[0] = new("ErrorDescription", errorDescription);

            logger.Log(
                logLevel,
                new(439709861, nameof(FailedToRequestAccessTokenForClient)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[2].Value;
                    var error = s.TagArray[1].Value ?? "(null)";
                    var errorDescription = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Error requesting access token for client {clientName}. Error = {error}, Description: {errorDescription}");
                    #else
                    return global::System.FormattableString.Invariant($"Error requesting access token for client {clientName}. Error = {error}, Description: {errorDescription}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Error trying to set token in cache for client {ClientName}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void ErrorSettingTokenInCache(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Exception ex, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Error trying to set token in cache for client {ClientName}");
            state.TagArray[0] = new("ClientName", clientName.ToString());

            logger.Log(
                logLevel,
                new(1513529959, nameof(ErrorSettingTokenInCache)),
                state,
                ex,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Error trying to set token in cache for client {clientName}");
                    #else
                    return global::System.FormattableString.Invariant($"Error trying to set token in cache for client {clientName}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Cache hit for obtaining access token for client: {ClientName}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CacheHitForObtainingAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Cache hit for obtaining access token for client: {ClientName}");
            state.TagArray[0] = new("ClientName", clientName.ToString());

            logger.Log(
                logLevel,
                new(1093771219, nameof(CacheHitForObtainingAccessToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Cache hit for obtaining access token for client: {clientName}");
                    #else
                    return global::System.FormattableString.Invariant($"Cache hit for obtaining access token for client: {clientName}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Cache hit for DPoP nonce for URL: {Url}, method: {Method}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CacheHitForDPoPNonce(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri url, global::System.Net.Http.HttpMethod method)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Cache hit for DPoP nonce for URL: {Url}, method: {Method}");
            state.TagArray[1] = new("Url", url);
            state.TagArray[0] = new("Method", method);

            logger.Log(
                logLevel,
                new(1681785355, nameof(CacheHitForDPoPNonce)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[1].Value ?? "(null)";
                    var method = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Cache hit for DPoP nonce for URL: {url}, method: {method}");
                    #else
                    return global::System.FormattableString.Invariant($"Cache hit for DPoP nonce for URL: {url}, method: {method}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Writing DPoP nonce to Cache for URL: {Url}, method: {Method}. Expiration: {Expiration}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void WritingNonceToCache(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri url, global::System.Net.Http.HttpMethod method, global::System.DateTimeOffset expiration)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(4);
            state.TagArray[3] = new("{OriginalFormat}", "Writing DPoP nonce to Cache for URL: {Url}, method: {Method}. Expiration: {Expiration}");
            state.TagArray[2] = new("Url", url);
            state.TagArray[1] = new("Method", method);
            state.TagArray[0] = new("Expiration", expiration);

            logger.Log(
                logLevel,
                new(1647717087, nameof(WritingNonceToCache)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[2].Value ?? "(null)";
                    var method = s.TagArray[1].Value ?? "(null)";
                    var expiration = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Writing DPoP nonce to Cache for URL: {url}, method: {method}. Expiration: {expiration}");
                    #else
                    return global::System.FormattableString.Invariant($"Writing DPoP nonce to Cache for URL: {url}, method: {method}. Expiration: {expiration}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Writing DPoP nonce to Cache for URL: {Url}, method: {Method}. Expiration: {Expiration}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void WritingNonceToCache(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri url, global::System.Net.Http.HttpMethod method, global::System.TimeSpan expiration)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(4);
            state.TagArray[3] = new("{OriginalFormat}", "Writing DPoP nonce to Cache for URL: {Url}, method: {Method}. Expiration: {Expiration}");
            state.TagArray[2] = new("Url", url);
            state.TagArray[1] = new("Method", method);
            state.TagArray[0] = new("Expiration", expiration);

            logger.Log(
                logLevel,
                new(1647717087, nameof(WritingNonceToCache)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[2].Value ?? "(null)";
                    var method = s.TagArray[1].Value ?? "(null)";
                    var expiration = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Writing DPoP nonce to Cache for URL: {url}, method: {method}. Expiration: {expiration}");
                    #else
                    return global::System.FormattableString.Invariant($"Writing DPoP nonce to Cache for URL: {url}, method: {method}. Expiration: {expiration}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Cache miss for DPoP nonce for URL: {Url}, method: {Method}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CacheMissForDPoPNonce(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri url, global::System.Net.Http.HttpMethod method)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Cache miss for DPoP nonce for URL: {Url}, method: {Method}");
            state.TagArray[1] = new("Url", url);
            state.TagArray[0] = new("Method", method);

            logger.Log(
                logLevel,
                new(1940983766, nameof(CacheMissForDPoPNonce)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[1].Value ?? "(null)";
                    var method = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Cache miss for DPoP nonce for URL: {url}, method: {method}");
                    #else
                    return global::System.FormattableString.Invariant($"Cache miss for DPoP nonce for URL: {url}, method: {method}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to parse the cached Nonce '{Value}' for URL: {Url}, method: {Method}. Error: {Error}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CachedNonceParseFailure(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri url, global::System.Net.Http.HttpMethod method, string value, string error)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(5);
            state.TagArray[4] = new("{OriginalFormat}", "Failed to parse the cached Nonce '{Value}' for URL: {Url}, method: {Method}. Error: {Error}");
            state.TagArray[3] = new("Url", url);
            state.TagArray[2] = new("Method", method);
            state.TagArray[1] = new("Value", value);
            state.TagArray[0] = new("Error", error);

            logger.Log(
                logLevel,
                new(1728649937, nameof(CachedNonceParseFailure)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[3].Value ?? "(null)";
                    var method = s.TagArray[2].Value ?? "(null)";
                    var value = s.TagArray[1].Value ?? "(null)";
                    var error = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Failed to parse the cached Nonce '{value}' for URL: {url}, method: {method}. Error: {error}");
                    #else
                    return global::System.FormattableString.Invariant($"Failed to parse the cached Nonce '{value}' for URL: {url}, method: {method}. Error: {error}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Error parsing cached access token for client {ClientName}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToCacheAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Exception ex, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Error parsing cached access token for client {ClientName}");
            state.TagArray[0] = new("ClientName", clientName.ToString());

            logger.Log(
                logLevel,
                new(692814272, nameof(FailedToCacheAccessToken)),
                state,
                ex,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Error parsing cached access token for client {clientName}");
                    #else
                    return global::System.FormattableString.Invariant($"Error parsing cached access token for client {clientName}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Cache miss while retrieving access token for client: {ClientName}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CacheMissWhileRetrievingAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Cache miss while retrieving access token for client: {ClientName}");
            state.TagArray[0] = new("ClientName", clientName.ToString());

            logger.Log(
                logLevel,
                new(150222240, nameof(CacheMissWhileRetrievingAccessToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Cache miss while retrieving access token for client: {clientName}");
                    #else
                    return global::System.FormattableString.Invariant($"Cache miss while retrieving access token for client: {clientName}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Creating DPoP proof token for token request.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void CreatingDPoPProofToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "Creating DPoP proof token for token request.");

            logger.Log(
                logLevel,
                new(1192847630, nameof(CreatingDPoPProofToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "Creating DPoP proof token for token request.";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Requesting client credentials access token at endpoint: {Url}".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void RequestingClientCredentialsAccessToken(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Uri url)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(2);
            state.TagArray[1] = new("{OriginalFormat}", "Requesting client credentials access token at endpoint: {Url}");
            state.TagArray[0] = new("Url", url);

            logger.Log(
                logLevel,
                new(1755383292, nameof(RequestingClientCredentialsAccessToken)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var url = s.TagArray[0].Value ?? "(null)";
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Requesting client credentials access token at endpoint: {url}");
                    #else
                    return global::System.FormattableString.Invariant($"Requesting client credentials access token at endpoint: {url}");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Client Credentials token of type '{TokenType}' for Client: {ClientName} retrieved with expiration {Expiration} ".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void ClientCredentialsTokenForClientRetrieved(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName, global::Duende.AccessTokenManagement.AccessTokenType? tokenType, global::System.DateTimeOffset expiration)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(4);
            state.TagArray[3] = new("{OriginalFormat}", "Client Credentials token of type '{TokenType}' for Client: {ClientName} retrieved with expiration {Expiration} ");
            state.TagArray[2] = new("ClientName", clientName.ToString());
            state.TagArray[1] = new("TokenType", tokenType?.ToString());
            state.TagArray[0] = new("Expiration", expiration);

            logger.Log(
                logLevel,
                new(1181087569, nameof(ClientCredentialsTokenForClientRetrieved)),
                state,
                null,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[2].Value;
                    var tokenType = s.TagArray[1].Value ?? "(null)";
                    var expiration = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Client Credentials token of type '{tokenType}' for Client: {clientName} retrieved with expiration {expiration} ");
                    #else
                    return global::System.FormattableString.Invariant($"Client Credentials token of type '{tokenType}' for Client: {clientName} retrieved with expiration {expiration} ");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to obtain token from cache for client {ClientName} using cacheKey {CacheKey}. Will obtain new token.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToObtainTokenFromCache(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Exception ex, global::Duende.AccessTokenManagement.ClientCredentialsClientName clientName, global::Duende.AccessTokenManagement.ClientCredentialsCacheKey cacheKey)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(3);
            state.TagArray[2] = new("{OriginalFormat}", "Failed to obtain token from cache for client {ClientName} using cacheKey {CacheKey}. Will obtain new token.");
            state.TagArray[1] = new("ClientName", clientName.ToString());
            state.TagArray[0] = new("CacheKey", cacheKey.ToString());

            logger.Log(
                logLevel,
                new(13665715, nameof(FailedToObtainTokenFromCache)),
                state,
                ex,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    var clientName = s.TagArray[1].Value;
                    var cacheKey = s.TagArray[0].Value;
                    #if NET
                    return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"Failed to obtain token from cache for client {clientName} using cacheKey {cacheKey}. Will obtain new token.");
                    #else
                    return global::System.FormattableString.Invariant($"Failed to obtain token from cache for client {clientName} using cacheKey {cacheKey}. Will obtain new token.");
                    #endif
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to parse JsonWebKey".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToParseJsonWebKey(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Exception ex)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "Failed to parse JsonWebKey");

            logger.Log(
                logLevel,
                new(948697071, nameof(FailedToParseJsonWebKey)),
                state,
                ex,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "Failed to parse JsonWebKey";
                });

            state.Clear();
        }

        /// <summary>
        /// Logs "Failed to create thumbprint from JSON web key.".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")]
        public static  void FailedToCreateThumbprintFromJsonWebKey(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.Exception ex)
        {
            if (!logger.IsEnabled(logLevel))
            {
                return;
            }

            var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;

            _ = state.ReserveTagSpace(1);
            state.TagArray[0] = new("{OriginalFormat}", "Failed to create thumbprint from JSON web key.");

            logger.Log(
                logLevel,
                new(2062437507, nameof(FailedToCreateThumbprintFromJsonWebKey)),
                state,
                ex,
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.Logging", "9.9.0.0")] static string (s, _) =>
                {
                    return "Failed to create thumbprint from JSON web key.";
                });

            state.Clear();
        }

        public static void RefreshingAccessTokenUsingRefreshToken(this ILogger logger, LogLevel logLevel, RefreshToken refreshToken, Func<string, string> hashAlgorithm)
        {
            if (logger.IsEnabled(logLevel))
            {
                 RefreshingTokenUsingRefreshTokenImplementation(logger, logLevel, hashAlgorithm(refreshToken.ToString()));
            }
        }
         public static void RevokingRefreshToken(this ILogger logger, LogLevel logLevel, RefreshToken refreshToken, Func<string, string> hashAlgorithm)
         {
             if (logger.IsEnabled(LogLevel.Trace))
             {
                 RevokingRefreshTokenImplementation(logger, logLevel, hashAlgorithm(refreshToken.ToString()));
             }
         }
    }
}
